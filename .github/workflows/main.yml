name: InfraMind CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      # Install Docker Compose using the standalone binary download for maximum compatibility.
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose


      - name: Build Spring Boot application with Maven
        run: mvn clean install -DskipTests

      - name: Build Docker image
        run: docker build -t inframind-app .

      - name: Simulate Local Deployment
        run: |
          echo "--- Simulating local deployment of InfraMind-app ---"
          echo "This step would typically deploy to a dev/staging server."
          echo "For local proof, you would run 'docker-compose up -d' here or similar."
          echo "--- Deployment simulation complete ---"

      - name: Verify Application Startup (Local)
        run: |
          echo "Starting Docker Compose services for verification..."
          # Use docker-compose to bring up the service defined in docker-compose.yml
          # This manages the container lifecycle and port binding more robustly.
          docker-compose up -d inframind-app # Only bring up the specific service

          # Add an initial sleep to give the application more time to fully start
          echo "Giving application an initial 15 seconds to boot before health checks begin..."
          sleep 15 # Spring Boot applications can take time to start up

          echo "Waiting for application to become healthy (max 60 seconds of polling)..."
          HEALTH_CHECK_URL="http://localhost:8081/api/public/health"
          APP_READY=false
          for i in $(seq 1 60); do
            # Use curl with increased robustness (silent, fail-silently, write-out HTTP code)
            response=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
            if [ "$response" -eq 200 ]; then
              echo "Application is up and running! Health check passed (HTTP 200)."
              APP_READY=true
              break
            fi
            echo "Attempt $i: Application not yet ready (HTTP status: $response). Retrying in 1 second..."
            sleep 1
          done

          # Final check and cleanup
          if [ "$APP_READY" = false ]; then
            echo "ERROR: Application did not start successfully within the expected time."
            echo "--- DIAGNOSTIC: Docker Compose Logs for inframind-app ---"
            docker-compose logs inframind-app # Output container logs for debugging
            echo "--- END DIAGNOSTIC ---"
            exit 1 # Fail the step if application is not ready
          fi

          echo "Application verification successful."
          # Clean up all services defined in docker-compose.yml
          docker-compose down
