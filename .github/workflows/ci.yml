name: InfraMind CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      # Install Docker Compose using the standalone binary download for maximum compatibility.
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Spring Boot application with Maven
        run: mvn clean install -DskipTests

      - name: Build Docker image (for inframind-app only, as collector is pulled)
        # CRITICAL: Add --no-cache to ensure new source code is picked up
        run: docker build -t inframind-app . --no-cache

      - name: Simulate Local Deployment and Verification
        run: |
          echo "--- Starting Docker Compose services for verification ---"
          # CRITICAL CORRECTION: Start ALL services in docker-compose.yml
          # This will use the docker-compose.yml from your repo, which now includes
          # the otel-collector, app command, javaagent volume, and environment variables.
          docker-compose up -d

          echo "Giving services an initial 15 seconds to boot before health checks begin..."
          sleep 15

          echo "Waiting for application to become healthy (max 60 seconds of polling)..."
          HEALTH_CHECK_URL="http://localhost:8081/api/public/health"
          APP_READY=false
          for i in $(seq 1 60); do
            response=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
            if [ "$response" -eq 200 ]; then
              echo "Application is up and running! Health check passed (HTTP 200)."
              APP_READY=true
              break
            fi
            echo "Attempt $i: Application not yet ready (HTTP status: $response). Retrying in 1 second..."
            sleep 1
          done

          # Final check and cleanup for application startup
          if [ "$APP_READY" = false ]; then
            echo "ERROR: Application did not start successfully within the expected time."
            echo "--- DIAGNOSTIC: Docker Compose Process Status ---"
            docker-compose ps # Show status of all services
            echo "--- END DIAGNOSTIC ---"
            echo "--- DIAGNOSTIC: Docker Compose Logs for inframind-app ---"
            docker-compose logs inframind-app # Output container logs for debugging
            echo "--- END DIAGNOSTIC ---"
            echo "--- DIAGNOSTIC: Docker Compose Logs for otel-collector (Startup) ---"
            docker-compose logs otel-collector
            echo "--- END DIAGNOSTIC ---"
            exit 1 # Fail the step if application is not ready
          fi

          echo "Application verification successful."

          # NEW: Generate some traffic to ensure metrics are pushed
          echo "--- Generating traffic to application endpoints ---"
          # Ensure you use the correct credentials for authenticated endpoints
          curl -u admin:password http://localhost:8081/api/v1/status || true
          curl -u admin:password -X POST http://localhost:8081/api/user/data || true
          curl http://localhost:8081/api/public/health || true
          sleep 5 # Give time for metrics to be exported and processed

          echo "--- DIAGNOSTIC: OpenTelemetry Collector Logs (After Traffic) ---"
          docker-compose logs otel-collector # Output collector logs AFTER traffic generation
          echo "--- END DIAGNOSTIC ---"

          echo "--- Verifying OpenTelemetry Collector Metrics Endpoint ---"
          METRICS_URL="http://localhost:8889/metrics"
          MAX_ATTEMPTS=12
          SLEEP_BETWEEN=5
          METRICS_RECEIVED=false

          for i in $(seq 1 $MAX_ATTEMPTS); do
            METRICS_RESPONSE=$(curl -s $METRICS_URL)
            if echo "$METRICS_RESPONSE" | grep -q "inframind_custom_uptime_seconds"; then
              echo "OpenTelemetry metrics successfully exposed on $METRICS_URL (attempt $i)."
              echo "Sample metrics output (inframind_custom_uptime_seconds):"
              echo "$METRICS_RESPONSE" | grep "inframind_custom_uptime_seconds"
              METRICS_RECEIVED=true
              break
            else
              echo "Attempt $i: Metric not found yet, waiting $SLEEP_BETWEEN seconds..."
              sleep $SLEEP_BETWEEN
            fi
          done

          if [ "$METRICS_RECEIVED" = false ]; then
            echo "ERROR: OpenTelemetry metrics verification failed after $MAX_ATTEMPTS attempts."
            echo "Last metrics output (if any):"
            echo "$METRICS_RESPONSE"
            exit 1
          fi

          echo "--- Checking custom metric inside inframind-app container ---"
          sleep 5
          APP_METRICS=$(docker exec inframind-inframind-app-1 curl -s http://localhost:8081/actuator/prometheus)
          if echo "$APP_METRICS" | grep -q "inframind_custom_uptime_seconds"; then
            echo "Custom metric found inside container."
            echo "$APP_METRICS" | grep "inframind_custom_uptime_seconds"
          else
            echo "ERROR: Custom metric 'inframind_custom_uptime_seconds' NOT found inside container."
            echo "Full metrics output:"
            echo "$APP_METRICS"
            echo "--- DIAGNOSTIC: inframind-app logs ---"
            docker-compose logs inframind-app
            exit 1
          fi

          echo "--- Verification complete. Cleaning up Docker Compose services ---"
          # Make docker-compose down robust by ensuring it doesn't fail the step if containers are already gone.
          docker-compose down || true